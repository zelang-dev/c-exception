Exceptions in ISO C89

Copyright (c) 2001+ Laurent Deniau, laurent.deniau@cern.ch

LAST RELEASE:
http://cern.ch/laurent.deniau/oopc.html

INSTALL:
  mkdir exception; cd exception
  tar xvzf exception.tgz
  -- edit exception.h to configure the Thread Locale Storage
  cp exception.h path-to-include
  cp exception.c path-to-source

TESTSUITE:
  -- edit testsuite.sh file to configure your compiler and enable threads
  ./testsuite.sh

SUPPORTED SYSTEMS:
  - Debian Etch x86-32, gcc 3.x and 4.x
  - Fedora x86-64, gcc 3.x and 4.x
  - to be continued..

COMMENTS:
  - Look at the examples for the syntax and the semantic.

  - The semantic of TRY-CATCH-FINALLY blocks is the same as in Java and C#,
    *except* that the use of return, break, continue, goto or longjump to
    jump inside or outside these blocks is *FORBIDDEN* (unchecked error!).

  - Throwing (rethrowing) exceptions within CATCH and FINALLY blocks is valid.

  - Combining both CATCH and FINALLY blocks in the same TRY-ENDTRY
    scope is equivalent to:

      TRY                     TRY                        
                                TRY
        ..                        ..
      CATCH(E1)                 CATCH(E1)
        ..                        ..
      CATCH(E2)                 CATCH(E2)
        ..                        ..
      CATCH_ANY()               CATCH_ANY()
        ..                        ..
                                ENDTRY
      FINALLY()               FINALLY()
        ..                      ..
      ENDTRY                  ENDTRY
 
    except that:
    - 1st case is more efficient.
    - 2nd case FINALLY() doesn't have access to the inner TRY-ENDTRY exception.

  - CATCH and FINALLY blocks are optional, but it makes sense to have
    at least one CATCH block. Within these blocks, THROW(E) and RETHROW()
    can be freely used.

  - If an uncaught exception reaches ENDTRY, it will be automatically
    rethrown. If it is the last TRY-ENDTRY, ex_terminate() will be called.

  - THROWLOC() can specify its location (automatic by default) after the
    exception argument (i.e. THROWLOC(ex,file,line)).
     
  - exception are const pointers to strings literals and can be used as such
    (e.g. printed).

  - PRT(ptr,del) protects the pointer ptr (not the object pointed) against
    raised exceptions, therefore if the object pointed by ptr changes before
    UNPRT(), the new object will be automatically protected. If ptr is
    not nul, del(ptr) will be invoked during stack unwinding. During stack
    unwinding, ex_uncaught_exception() returns a non-zero value, 0 otherwise.
     
  - UNPRT(ptr) unprotects ptr and all objects protected after.

  - PRT()/UNPRT() work like a stack PUSH()/POP() of protected objects.

  - A keyword will be prefixed with EX_ if EX_DISABLE_keyword is defined
    before including exception.h (i.e. name clash).
    
  - To convert a signal into an exception, one can use
      extern const char EX_NAME(sig_val)[];
      ex_signal(SIGVAL, EX_NAME(sig_val));
    or simply
      ex_signal_std()
    which converts some common signals (see exception.c) into exceptions
    if they are available (i.e. defined in signal.h).
