name: release

on:
  release:
    types: [published]

permissions:
    contents: write

jobs:
  build-windows:
    name: Windows (${{ matrix.config.target }})
    runs-on: windows-latest
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        config:
          - {target: x64,     build: win64 }
          - {target: Win32,   build: win32 }
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.config.target }}
      - uses: actions/checkout@v4
      - name: Configure
        run: |
            mkdir build
            cd build
            cmake .. -D BUILD_TESTS=OFF -D BUILD_EXAMPLES=OFF -A ${{ matrix.config.target }}
      - name: Build
        run: |
            cd build
            cmake --build . --config Release
      - name: Create NSIS Installer from Release
        run: |
            cd build
            cpack -G NSIS
      - name: Upload the windows binary artifacts
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: built/Package/raii-${{ github.event.release.tag_name }}-${{ matrix.config.build }}.exe
          asset_name: raii-${{ github.event.release.tag_name }}-${{ matrix.config.build }}.exe
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
          body: "Windows NSIS ${{ matrix.config.build }} Raii libraries and header *.h files Installer."

  build-linux:
    name: Linux ${{ matrix.config.target }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        config:
            - {target: amd64, flags: -m64 }
            - {target: i386, flags: -m32 }
    steps:
      - uses: actions/checkout@v4
      - name: Prepare
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -q -y
          sudo apt-get install -y gcc-multilib g++-multilib valgrind libc6-dbg libc6-dbg:i386
      - name: Configure & build
        run: |
            mkdir build
            cd build
            cmake -DCMAKE_BUILD_TYPE=Release -D BUILD_TESTS=OFF -D BUILD_EXAMPLES=OFF -DCMAKE_C_FLAGS=${{ matrix.config.flags }} ..
            cmake --build .
      - name: Create DEB Installer from Release
        run: |
            cd build
            cpack -G DEB
            ls ../built/Package
      - name: Upload the windows binary artifacts
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: built/Package/raii_${{ github.event.release.tag_name }}_${{ matrix.config.target }}.deb
          asset_name: raii_${{ github.event.release.tag_name }}_${{ matrix.config.target }}.deb
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
          body: "Ubuntu/Debian $${{ matrix.config.target }} Raii libraries and header *.h files Installer."
